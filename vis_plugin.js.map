{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/vis_primitives.js","webpack:///./src/vis_plugin.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ModelField","vis","queryResponseField","this","view","view_label","label","field_group_variant","label_short","is_numeric","is_array","includes","type","value_format","geo_type","map_layer","hide","config","style","style_setting","heading","short_name","unit","tags","forEach","tag","split","Series","keys","values","types","length","line_items_only","with_subtotals","push","min_for_display","Math","min","max_for_display","max","sum","reduce","a","b","count","avg","console","log","newArray","arr","ModelDimension","super","align","ModelPivot","ModelMeasure","can_pivot","is_table_calculation","calculation_type","is_turtle","CellSeries","column","row","sort_value","series","rendered","formatted_value","modelField","toString","SSF","format","ColumnSeries","HeaderField","pivotData","Row","id","sort","data","Column","transposed","idx","pos","levels","pivot_key","variance_type","pivoted","subtotal","sort_by_measure_values","sort_by_pivot_values","colspans","colspan_values","headers","header","level","headerField","header_setting","label_setting","visId","useShortName","useViewName","join","sortColsBy","header_levels","getLabel","useHeadings","has_pivots","column_heading","config_setting","unshift","headerData","pluginDefaults","dimensionLabels","dimensionHide","measureLabels","measureStyles","colorBy","groupBy","sizeBy","VisPluginModel","lookerData","queryResponse","dimensions","measures","columns","ranges","pivot_fields","pivot_values","fields","supermeasure_like","has_supers","addPivots","addDimensions","addMeasures","buildRows","pivots","pivot","pivot_field","set","pivot_value","current_set","row_value","indexOf","dimension_like","dimension","dim","measure_like","measure","mea","pivotKey","columnId","level_sort_values","sort_values","supermeasure","lookerRow","current_min","current_max","cell_style","all_dims","includeRowId","melt","jsonData","filter","valueRef","lookerId","lookerPivotKey","tipText","entries","entry","getConfigOptions","visModel","pluginSettings","baseOptions","newOptions","section","default","order","display_size","display","optionChoices","sizeByOptions","option","colorByOptions"],"mappings":"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","file":"vis_plugin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * Returns an array of given length, all populated with same value\n * Convenience function e.g. to initialise arrays of zeroes or nulls\n * @param {*} length \n * @param {*} value \n */\nconst newArray = function(length, value) {\n  var arr = []\n  for (var l = 0; l < length; l++) {\n    arr.push(value)\n  }\n  return arr\n}\n\nclass ModelField {\n  constructor({ vis, queryResponseField }) {\n    this.vis = vis\n    this.name = queryResponseField.name\n    this.view = queryResponseField.view_label || ''\n    this.label = queryResponseField.field_group_variant || queryResponseField.label_short || queryResponseField.label\n    this.is_numeric = queryResponseField.is_numeric\n    this.is_array = ['list', 'location', 'tier'].includes(queryResponseField.type)\n    this.value_format = queryResponseField.value_format\n\n    this.geo_type = ''\n    if (queryResponseField.type === 'location' || queryResponseField.map_layer) {\n      this.geo_type = queryResponseField.type === 'location' ? 'location' : queryResponseField.map_layer.name\n    } \n\n    this.hide = false\n    if (typeof this.vis.config['hide|' + this.name] !== 'undefined') {\n      if (this.vis.config['hide|' + this.name]) {\n        this.hide = true\n      } \n    }\n\n    this.style = ''\n    var style_setting = this.vis.config['style|' + this.name]\n    if (typeof style_setting !== 'undefined') {\n      if (style_setting === 'hide') {\n        this.hide = true\n      } else {\n        this.style = style_setting\n      }\n    }\n\n    this.heading = ''\n    this.short_name = ''\n    this.unit = ''\n    if (typeof queryResponseField.tags !== 'undefined') {\n      queryResponseField.tags.forEach(tag => {\n        var tags = tag.split(':')\n        if (tags[0] === 'vis-tools') {\n          switch (tags[1]) {\n            case 'heading':\n              this.heading = tags[2] ; break\n            case 'short_name':\n              this.short_name = tags[2] ; break\n            case 'unit':\n              this.unit = tags[2] ; break\n            case 'style':\n              this.style = tags[2] ; break\n          }\n        }\n      })\n    }\n  }\n}\n\nclass ModelDimension extends ModelField {\n  constructor({ vis, queryResponseField }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'dimension'    \n    this.align = 'left'\n  }\n}\n\nclass ModelPivot extends ModelField {\n  constructor({ vis, queryResponseField }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'pivot'    \n    this.align = 'center'\n  }\n}\n\nclass ModelMeasure extends ModelField {\n  constructor({ vis, queryResponseField, can_pivot }) {\n    super({ vis, queryResponseField })\n\n    this.type = 'measure'\n    this.align = 'right'\n\n    this.is_table_calculation = typeof queryResponseField.is_table_calculation !== 'undefined' && queryResponseField.is_table_calculation\n    this.calculation_type = queryResponseField.type\n    this.is_turtle = queryResponseField.is_turtle\n    this.can_pivot = can_pivot\n  }\n}\n\nclass HeaderField {\n  constructor({ vis, type, modelField = { name: '', label: '', view: '' }, pivotData = {} } = { vis, type, modelField, pivotData }) {\n    this.vis = vis\n    this.type = type\n    \n    this.modelField = modelField\n    // this.name = modelField.name\n    // this.view = modelField.view\n\n    this.pivotData = pivotData\n  }\n}\n\n/**\n * types: dimension | line_item | subtotal | total\n */\nclass Series {\n  constructor({ keys, values, types = [] }) {\n    if (keys.length === values.length ) {\n      this.keys = keys\n      this.values = values\n      this.types = types\n\n      var line_items_only = []\n      var with_subtotals = []\n\n      this.values.forEach((value, i) => {\n        this.types[i] = typeof types[i] !== 'undefined' ? types[i] : 'line_item'\n        if (this.types[i] === 'line_item') {\n          line_items_only.push(value)\n          with_subtotals.push(value)\n        } else if (this.types[i] === 'subtotal') {\n          with_subtotals.push(value)\n        }\n      })\n\n      this.min_for_display = Math.min(with_subtotals)\n      this.max_for_display = Math.max(with_subtotals)\n      this.min = Math.min(line_items_only)\n      this.max = Math.max(line_items_only)\n      this.sum = line_items_only.reduce((a, b) => a + b, 0)\n      this.count = line_items_only.length\n      this.avg = line_items_only.length > 0 ? this.sum / line_items_only.length : null\n    } else {\n      console.log('Could not construct series, arrays were of different length.')\n    }\n  }\n}\n\nclass CellSeries {\n  constructor({ column, row, sort_value, series}) {\n    this.column = column\n    this.row = row\n    this.sort_value = sort_value\n    this.series = new Series(series)\n  }\n\n  toString() {\n    var rendered = ''\n    this.series.keys.forEach((key, i) => {\n      rendered += key + ':'\n      var formatted_value = this.column.modelField.value_format === '' \n                            ? this.series.values[i].toString() \n                            : SSF.format(this.column.modelField.value_format, this.series.values[i])\n      rendered += formatted_value + ' '\n    })\n    return rendered\n  }\n}\n\nclass ColumnSeries {\n  constructor({ column, is_numeric, series }) {\n    this.column = column\n    this.is_numeric = is_numeric\n    this.series = new Series(series)\n  }\n}\n\n/**\n * Represents a row in the dataset that populates the vis.\n * This may be an addtional row (e.g. subtotal) not in the original query\n * @class\n */\nclass Row {\n  constructor(type = 'line_item') {\n    this.id = ''\n    this.modelField = null\n    this.hide = false\n    this.type = type  // line_item | subtotal | total\n    this.sort = []    // [ section, subtotal group, row number ]\n    this.data = {}    // Indexed by Column.id\n                      // { value: any, rendered: string, html?: string, links?: array }\n  }\n}\n\n/**\n * Represents a column in the dataset that populates the vis.\n * This may be an additional columns (e.g. subtotal, variance) not in the original query\n * \n * Ensures all key vis properties (e.g. 'label') are consistent across different field types\n * \n * @class\n */\nclass Column {\n  constructor(id, vis, modelField) {\n    this.id = id\n    this.vis = vis\n    this.modelField = modelField\n    this.transposed = false\n\n    this.idx = 0\n    this.pos = 0\n    this.levels = []\n    this.pivot_key = '' \n\n    this.unit = modelField.unit || ''\n    this.hide = modelField.hide || false\n    this.variance_type = '' // empty | absolute | percentage\n    this.pivoted = false\n    this.subtotal = false\n    this.super = false\n\n    this.series = null\n    \n    this.sort_by_measure_values = [] // [index -1|dimension 0|measure 1|row totals & supermeasures 2, column number, [measure values]  ]\n    this.sort_by_pivot_values = []   // [index -1|dimension 0|measure 1|row totals & supermeasures 2, [pivot values], column number    ]\n\n    this.colspans = []\n\n    var colspan_values = {}\n    this.vis.headers.forEach(header => {\n      colspan_values[header.type] = 1\n    })\n    this.vis.colspan_values[this.id] = colspan_values\n  }\n\n  /**\n   * Returns a header label for a column, to display in table vis\n   * @param {*} level\n   */\n  getLabel (level) {\n    var headerField = this.levels[level]\n\n    var label = headerField.modelField.label\n\n    var header_setting = this.vis.config['heading|' + headerField.modelField.name]\n    var label_setting = this.vis.config['label|' + headerField.modelField.name]\n\n    if (headerField.type === 'heading') {\n      if (typeof header_setting !== 'undefined') {\n        label = header_setting ? header_setting : headerField.modelField.heading\n      } else {\n        label = headerField.modelField.heading\n      }\n      return label\n    }\n\n    if (headerField.type === 'field') {\n      if (typeof this.vis.visId !== 'undefined' && this.vis.visId === 'report_table') {\n        switch (this.variance_type) {\n          case 'absolute':\n            label = 'Var #'\n            break;\n          case 'percentage':\n            label = 'Var %'\n            break;\n          default:\n            label = this.vis.useShortName\n             ? headerField.modelField.short_name || headerField.modelField.label \n             : headerField.modelField.label\n        }\n      } \n      \n      if (typeof label_setting !== 'undefined' && label_setting !== this.modelField.label) {\n        label = label_setting ? label_setting : label\n      }\n  \n      if (typeof this.vis.useViewName !== 'undefined' && this.vis.useViewName) {\n        label = [this.modelField.view, label].join(' ') \n      }\n    }\n    \n    return label\n  }\n\n  /***\n   * Returns array of all header fields per column\n   * 1. Combine pivot values with measure label, in order set by sortColsBy option\n   * 2. Add headings if used (option chosen, flat tables only)\n   */\n  getHeaderLevels () {\n    if (this.modelField.vis.sortColsBy === 'getSortByPivots') {\n      var header_levels = [...this.levels, this.getLabel(this.levels.length)]\n    } else {\n      var header_levels = [this.getLabel(0), ...this.levels]\n    }\n\n    if (this.modelField.vis.useHeadings && !this.modelField.vis.has_pivots) {\n      var column_heading = this.modelField.heading\n      var config_setting = this.modelField.vis.config['heading|' + this.modelField.name]\n      if (typeof config_setting !== 'undefined') {\n        column_heading = config_setting ? config_setting : column_heading\n      } \n      header_levels.unshift(column_heading)\n    }\n\n    return header_levels\n  }\n\n  getHeaderData () {\n    var headerData = {}\n    this.modelField.vis.headers.forEach((header, i) => {\n      headerData[header.type] = this.levels[i]\n    })\n\n    return headerData\n  }\n\n  updateSortByMeasures (idx) {\n    if (this.sort_by_measure_values[0] == 1) {\n      if (!this.pivoted && !this.subtotal) {\n        this.sort_by_measure_values = [1, idx]\n      }\n    }\n  }\n\n  getSortByMeasures () {\n    return this.sort_by_measure_values\n  }\n\n  getSortByPivots () {\n    return this.sort_by_pivot_values\n  }\n}\n\nexports.newArray = newArray\nexports.ModelDimension = ModelDimension\nexports.ModelPivot = ModelPivot\nexports.ModelMeasure = ModelMeasure\nexports.CellSeries = CellSeries\nexports.ColumnSeries = ColumnSeries\nexports.HeaderField = HeaderField\nexports.Row = Row\nexports.Column = Column\n","import { newArray, ModelDimension, ModelMeasure, PivotField, Row, Column } from './vis_primitives'\n\nconst pluginDefaults = {\n  dimensionLabels: true,\n  dimensionHide: false,\n  measureLabels: true,\n  measureStyles: [],\n  colorBy: false,\n  groupBy: false,\n  sizeBy: false,\n}\n\n/**\n * Represents an \"enriched data object\" with additional methods and properties for data vis\n * Takes the data, config and queryResponse objects as inputs to the constructor\n */\nclass VisPluginModel {\n  /**\n   * Build the lookerData object\n   * @constructor\n   * \n   * 1. Check for pivots and supermeasures\n   * 2. Add dimensions, list of ids, list of full objects\n   * 3. Add measures, list of ids, list of full objects\n   * 4. Build rows\n   * \n   * @param {*} lookerData \n   * @param {*} config \n   * @param {*} queryResponse \n   */\n  constructor(lookerData, config, queryResponse) {\n    this.visId = 'vis_plugin'\n    this.config = config\n\n    this.dimensions = []\n    this.measures = []\n    this.columns = []\n    this.data = []\n    \n\n    this.ranges = {}\n    \n    this.pivot_fields = []\n    this.pivot_values = []\n    this.has_pivots = false\n    \n    if (typeof queryResponse.fields.supermeasure_like !== 'undefined') {\n      this.has_supers = true\n    } else {\n      this.has_supers = false\n    }\n\n    this.addPivots(queryResponse)\n    this.addDimensions(queryResponse)\n    this.addMeasures(queryResponse)\n    this.buildRows(lookerData)\n  }\n\n  addPivots(queryResponse) {\n    if (typeof queryResponse.pivots !== 'undefined') {\n      queryResponse.fields.pivots.forEach(pivot => { \n        var pivot_field = new PivotField({\n          name: pivot.name,\n          label: pivot.label_short || pivot.label,\n          view: pivot.view_label || '',\n        })\n        this.pivot_fields.push(pivot_field) \n        this.ranges[pivot_field.name] = {set : []}\n      })\n      \n      this.pivot_values = queryResponse.pivots\n      this.ranges['lookerPivotKey'] = {set: []}\n\n      this.pivot_values.forEach(pivot_value => {\n        this.ranges['lookerPivotKey'].set.push(pivot_value.key)\n        \n        for (var key in pivot_value.data) {\n          var current_set = this.ranges[key].set\n          var row_value = pivot_value.data[key]\n          if (current_set.indexOf(row_value) === -1) {\n            current_set.push(row_value)\n          }\n        }\n      })\n      this.has_pivots = true\n    }\n  }\n\n  addDimensions(queryResponse) {\n    queryResponse.fields.dimension_like.forEach(dimension => {\n      var dim = new ModelDimension({\n        vis: this,\n        modelField: dimension\n      })\n      this.dimensions.push(dim)\n      this.ranges[dim.name] = {\n        set: [],\n      }\n\n      var column = new Column(dim.name, this, dim) \n      column.levels = newArray(queryResponse.fields.pivots.length, '') // populate empty levels when pivoted\n\n      this.columns.push(column)\n    })\n  }\n\n  addMeasures(queryResponse) {\n    // add measures, list of ids\n    queryResponse.fields.measure_like.forEach(measure => {\n      var mea = new ModelMeasure({\n        vis: this,\n        modelField: measure\n      })\n      this.measures.push(mea) \n      this.ranges[mea.name] = {\n        min: 100000000,\n        max: 0,\n      }\n    })\n    \n    // add measures, list of full objects\n    if (this.has_pivots) {\n      this.pivot_values.forEach(pivot_value => {\n        this.measures.length.forEach((measure, m) => {\n          var include_measure = (                                     // for pivoted measures, skip table calcs for row totals\n            pivot_value.key != '$$$_row_total_$$$'                    // if user wants a row total for table calc, must define separately\n          ) || (\n            pivot_value.key == '$$$_row_total_$$$' \n            && measure.is_table_calculation == false\n          )\n\n          if (include_measure) {\n            var pivotKey = pivot_value.key\n            var measureName = measure.name\n            var columnId = pivotKey + '.' + measureName\n\n            var levels = [] // will contain a list of all the pivot values for this column\n            var level_sort_values = []\n            this.pivot_fields.forEach(pivot => { \n              levels.push(pivot_value[pivot.name])\n              level_sort_values.push(pivot_value.sort_values[pivot.name]) \n            })\n\n            var column = new Column(columnId, this, measure)\n            column.levels = levels\n            column.pivoted = true\n            column.pivot_key = pivotKey\n\n            // TODO: Hide function\n\n            this.columns.push(column)\n          }\n        })\n      })\n    } else {\n      // noticeably simpler for flat tables!\n      this.measures.forEach(measure => {\n        var column = new Column(measure.name, vis, measure)\n\n        this.columns.push(column)\n\n        if (typeof this.config['style|' + column.id] !== 'undefined') {\n          if (this.config['style|' + column.id] === 'hide') {\n            column.hide = true\n          }\n        }\n      })\n    }\n    \n    // add supermeasures, if present\n    if (typeof queryResponse.fields.supermeasure_like !== 'undefined') {\n      queryResponse.fields.supermeasure_like.forEach(supermeasure => {\n        var mea = new ModelMeasure({\n          vis: this,\n          modelField: supermeasure\n        })\n        this.measures.push(mea) \n\n        var column = new Column(mea.name, this, mea)\n        column.levels = newArray(queryResponse.fields.pivots.length, '')\n        column.super = true\n\n        this.columns.push(column)\n      })\n    }\n  }\n\n  buildRows(lookerData) {\n    lookerData.forEach(lookerRow => {\n      var row = new Row() // TODO: consider creating the row object once all required field values identified\n      \n      this.columns.forEach(column => {\n        var name = column.modelField.name\n\n        // flatten data, if pivoted. Looker's data structure is nested for pivots (to a single level, no matter how many pivots)\n        if (column.pivoted) {\n          row.data[column.id] = lookerRow[name][column.pivot_key]\n        } else {\n          row.data[column.id] = lookerRow[column.id]\n        }\n\n        if (typeof row.data[column.id] !== 'undefined') {\n          if (column.modelField.type === 'measure') {\n            var current_min = this.ranges[name].min\n            var current_max = this.ranges[name].max\n            var row_value = row.data[column.id].value\n\n            this.ranges[name].min = Math.min(current_min, row_value)\n            this.ranges[name].max = Math.max(current_max, row_value)\n          } else if (column.modelField.type === 'dimension') {\n            var current_set = this.ranges[name].set\n            var row_value = row.data[column.id].value\n\n            if (current_set.indexOf(row_value) === -1) {\n              current_set.push(row_value)\n            }\n          }\n\n          if (typeof row.data[column.id].cell_style === 'undefined') {\n            row.data[column.id].cell_style = []\n          }\n        }\n      })\n\n      // set a unique id for the row\n      var all_dims = []\n      this.dimensions.forEach(dimension => {\n        all_dims.push(lookerRow[dimension.name].value)\n      })\n      row.id = all_dims.join('|')\n\n      this.data.push(row)\n    })\n  }\n\n  getDimensionByName(name) {\n    this.dimensions.forEach(d => {\n      if (d.name === name) {\n        return d\n      }\n    })\n  }\n\n  getMeasureByName(name) {\n    this.measures.forEach(m => {\n      if (m.name === name) {\n        return m\n      }\n    })\n  }\n\n  /**\n   * Returns dataset as a simple json object\n   * Includes line_items only (e.g. no row subtotals)\n   * \n   * @param {boolean} includeRowId - adds a unique lookerId value to each row\n   * @param {boolean} melt - if dataset is pivoted, will 'melt' back to flat data\n   */\n  getJson(includeRowId=true, melt=false) {\n    var jsonData = []\n    if (!this.has_pivots || !melt) {\n      this.data.forEach(r => {\n        var row = {}\n        this.columns\n          .filter(c => !c.hide).forEach(c => {\n            row[c.id] = r.data[c.id].value\n          })\n        if (includeRowId) {\n          row.lookerId = r.id\n        }\n        jsonData.push(row)\n      })\n    } else {\n      this.pivot_values.forEach(p => {\n        this.data.forEach(r => {\n          var row = {}\n          for (var pivot_value in p.data) {\n            row[pivot_value] = p.data[pivot_value]\n          }\n          this.columns // 'flat fields' i.e. dimensions and supermeasures\n            .filter(c => !c.hide)\n            .filter(c => c.type === 'dimension' || c.super)\n            .forEach(c => {\n              row[c.id] = r.data[c.id].value\n            })\n          this.columns // 'pivoted fields' i.e. measures\n            .filter(c => !c.hide)\n            .filter(c => c.pivoted)\n            .forEach(c => {\n              var valueRef = p.key + '.' + c.modelField.name\n              row[c.modelField.name] = r.data[valueRef].value\n            })\n          if (includeRowId) {\n            row.lookerId = p.key + '|' + r.id\n          }\n          row.lookerPivotKey = p.key\n          jsonData.push(row)\n        })\n      })\n    }\n\n    return jsonData\n  }\n\n  getTooltipFromD3(d) {\n    var tipText = ''\n\n    Object.entries(d).forEach(entry => {\n      tipText += \"<p><em>\" + entry[0] + \":</em> \" + entry[1] + \"</p>\"\n    })\n    \n    return tipText;\n  }\n}\n\nconst getConfigOptions = (visModel, pluginSettings=pluginDefaults, baseOptions={}) => {\n  var pluginSettings = {...pluginDefaults, ...pluginSettings} \n  var newOptions = baseOptions\n\n  visModel.dimensions.forEach((dimension, i) => {\n    if (pluginSettings.dimensionLabels) {\n      newOptions['label|' + dimension.name] = {\n        section: 'Dimensions',\n        type: 'string',\n        label: dimension.label,\n        default: dimension.label,\n        order: i * 10 + 1,\n      }\n    }\n\n    if (pluginSettings.dimensionHide) {\n      newOptions['hide|' + dimension.name] = {\n        section: 'Dimensions',\n        type: 'boolean',\n        label: 'Hide',\n        display_size: 'third',\n        order: i * 10 + 2,\n      }\n    }\n  })\n\n  visModel.measures.forEach((measure, i) => {\n    if (pluginSettings.measureLabels) {\n      newOptions['label|' + measure.name] = {\n        section: 'Measures',\n        type: 'string',\n        label: measure.label_short || measure.label,\n        default: measure.label_short || measure.label,\n        order: 100 + i * 10 + 1,\n      }\n    }\n\n    if (pluginSettings.measureStyles.length > 0) {\n      newOptions['style|' + visModel.measures[i].name] = {\n        section: 'Measures',\n        type: 'string',\n        label: 'Style',\n        display: 'select',\n        values: optionChoices.measureStyles,\n        order: 100 + i * 10 + 2\n      }\n    }\n  })\n\n  if (pluginSettings.sizeBy) {\n    var sizeByOptions = [];\n    visModel.measures.forEach(measure => {\n        var option = {};\n        option[measure.label] = measure.name;\n        sizeByOptions.push(option);\n    })\n  \n    newOptions[\"sizeBy\"] = {\n        section: \" Visualization\",\n        type: \"string\",\n        label: \"Size By\",\n        display: \"select\",\n        values: sizeByOptions,\n        default: \"0\",\n        order: 300,\n    }\n  }\n\n  // colorByOptions include:\n  // - by dimension\n  // - by pivot key (which are also dimensions)\n  // - by pivot series (one color per column)\n  var colorByOptions = [];\n  visModel.dimensions.forEach(dimension => {\n      var option = {};\n      option[dimension.label] = dimension.name;\n      colorByOptions.push(option)\n  })\n\n  visModel.pivot_fields.forEach(pivot_field => {\n    var option = {};\n    option[pivot_field.label] = pivot_field.name;\n    colorByOptions.push(option)\n  })\n\n  if (visModel.pivot_fields.length > 1 ) {\n    colorByOptions.push({'Pivot Series': 'lookerPivotKey'})\n  }\n  \n  if (pluginSettings.colorBy) {\n    newOptions[\"colorBy\"] = {\n      section: \" Visualization\",\n      type: \"string\",\n      label: \"Color By\",\n      display: \"select\",\n      values: colorByOptions,\n      default: \"0\",\n      order: 100,\n    } \n  }\n\n  if (pluginSettings.groupBy) {\n    newOptions[\"groupBy\"] = {\n      section: \" Visualization\",\n      type: \"string\",\n      label: \"Group By\",\n      display: \"select\",\n      values: colorByOptions,\n      default: \"0\",\n      order: 200,\n    } \n  }\n\n  return newOptions\n}\n\nexports.VisPluginModel = VisPluginModel\nexports.getConfigOptions = getConfigOptions\n"],"sourceRoot":""}